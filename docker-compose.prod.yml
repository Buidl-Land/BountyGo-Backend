# BountyGo Backend Production Docker Compose Configuration
# 生产环境配置

version: '3.8'

services:
  # PostgreSQL Database (Production)
  db:
    image: postgres:15-alpine
    container_name: bountygo-db-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-bountygo}
      POSTGRES_USER: ${POSTGRES_USER:-bountygo}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-bountygo} -d ${POSTGRES_DB:-bountygo}"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - bountygo-prod-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Redis Cache (Production)
  redis:
    image: redis:7-alpine
    container_name: bountygo-redis-prod
    command: redis-server --appendonly yes --requirepass "${REDIS_PASSWORD:-}"
    volumes:
      - redis_data_prod:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - bountygo-prod-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'

  # BountyGo Backend Application (Production)
  app:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: bountygo-app-prod
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      # URL Agent Production Configuration
      - CONTENT_EXTRACTION_TIMEOUT=60
      - MAX_CONTENT_LENGTH=100000
      - USE_PROXY=false
      - ENABLE_CONTENT_CACHE=true
      - CONTENT_CACHE_TTL=7200
      - USER_AGENT=BountyGo-URLAgent/1.0
      - MAX_REDIRECTS=5
      - VERIFY_SSL=true
    env_file:
      - .env.prod
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - bountygo-prod-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
      rollback_config:
        parallelism: 1
        delay: 10s

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: bountygo-nginx-prod
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - app
    networks:
      - bountygo-prod-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local

networks:
  bountygo-prod-network:
    driver: bridge
    name: bountygo-prod-network